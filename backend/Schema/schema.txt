

-- STEP 1: DROP ALL TABLES IN DEPENDENCY ORDER
DROP TABLE IF EXISTS 
    NOTICE_STUDENT,
    NOTICE_TEACHER,
    NOTICE,
    GRADE,
    TEACHER_COURSE,
    ENROLLMENT,
    REQUEST,
    DUES,
    HALL_SECURITY,
    STUDENT,
    TEACHER,
    ADMIN,
    COURSE,
    LEVEL_TERM,
    HALL,
    DEPARTMENT,
    LOGIN CASCADE;

-- STEP 2: CREATE TABLES IN ORDER

CREATE TABLE LOGIN (
    LOGIN_ID INT PRIMARY KEY,  -- manually assigned e.g., 2205091
    USER_TYPE VARCHAR(50),
    PASSWORD VARCHAR(100)
);

CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID VARCHAR(20) PRIMARY KEY,
    NAME VARCHAR(100)
);

CREATE TABLE LEVEL_TERM (
    LEVEL_TERM_ID INT PRIMARY KEY,
    LEVEL VARCHAR(10),
    TERM VARCHAR(10)
);

CREATE TABLE HALL (
    HALL_ID INT PRIMARY KEY,
    HALL_NAME VARCHAR(100),
    SUPERVISER_NAME VARCHAR(100),
    PHONE_NUMBER VARCHAR(20),
    EMAIL VARCHAR(100)
);

CREATE TABLE TEACHER (
    LOGIN_ID INT PRIMARY KEY,
    DEPARTMENT_ID VARCHAR(20),
    NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE_NUMBER VARCHAR(20),
    FOREIGN KEY (LOGIN_ID) REFERENCES LOGIN(LOGIN_ID),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

CREATE TABLE STUDENT (
    LOGIN_ID INT PRIMARY KEY,
    LEVEL_TERM_ID INT,
    DEPARTMENT_ID VARCHAR(20),
    HALL_ID INT,
    ADVISOR_ID INT,
    NAME VARCHAR(100),*
    BIRTH_REGISTRATION_NO VARCHAR(20) UNIQUE NOT NULL,
    BIRTH_DATE DATE,
    NID VARCHAR(20) UNIQUE,*
    BANK_ACCOUNT_NUMBER VARCHAR(30) UNIQUE,*
    EMAIL VARCHAR(100) UNIQUE NOT NULL,*
    DISTRICT VARCHAR(50),*
    UPAZILLA VARCHAR(50),*
    ADDITIONAL_ADDRESS TEXT,*
    CONTACT_PERSON_NAME VARCHAR(100),*
    CONTACT_PERSON_ADDRESS TEXT,*
    MOBILE_NUMBER VARCHAR(20),*
    FOREIGN KEY (LOGIN_ID) REFERENCES LOGIN(LOGIN_ID),
    FOREIGN KEY (LEVEL_TERM_ID) REFERENCES LEVEL_TERM(LEVEL_TERM_ID),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID),
    FOREIGN KEY (HALL_ID) REFERENCES HALL(HALL_ID),
    FOREIGN KEY (ADVISOR_ID) REFERENCES TEACHER(LOGIN_ID)
);

CREATE TABLE COURSE (
    COURSE_ID VARCHAR(20) PRIMARY KEY,
    DEPARTMENT_ID VARCHAR(20),
    TITLE VARCHAR(100),
    CREDIT NUMERIC(4,2),
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

CREATE TABLE ADMIN (
    LOGIN_ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    PHONE_NUMBER VARCHAR(20),
    EMAIL VARCHAR(100) UNIQUE,
    JOB_TYPE VARCHAR(50),
    FOREIGN KEY (LOGIN_ID) REFERENCES LOGIN(LOGIN_ID)
);

CREATE TABLE ENROLLMENT (
    LOGIN_ID INT,
    COURSE_ID VARCHAR(20),
    PRIMARY KEY (LOGIN_ID, COURSE_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES STUDENT(LOGIN_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE TEACHER_COURSE (
    LOGIN_ID INT,
    LEVEL_TERM_ID INT,
    COURSE_ID VARCHAR(20),
    PRIMARY KEY (LOGIN_ID, LEVEL_TERM_ID, COURSE_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES TEACHER(LOGIN_ID),
    FOREIGN KEY (LEVEL_TERM_ID) REFERENCES LEVEL_TERM(LEVEL_TERM_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE GRADE (
    LOGIN_ID INT,
    LEVEL_TERM_ID INT,
    COURSE_ID VARCHAR(20),
    TEACHER_ID INT,
    GRADE NUMERIC(4,2),
    PRIMARY KEY (LOGIN_ID, LEVEL_TERM_ID, COURSE_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES STUDENT(LOGIN_ID),
    FOREIGN KEY (LEVEL_TERM_ID) REFERENCES LEVEL_TERM(LEVEL_TERM_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER(LOGIN_ID)
);

CREATE TABLE REQUEST (
    REQUEST_ID SERIAL PRIMARY KEY,
    LOGIN_ID INT,
    REQUEST_TYPE VARCHAR(50) NOT NULL,
    PURPOSE TEXT,
    REQUEST_DATE DATE NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'pending',
    APPROVAL_DATE DATE,
    COMMENTS TEXT,
    FOREIGN KEY (LOGIN_ID) REFERENCES STUDENT(LOGIN_ID)
);

CREATE TABLE DUES (
    DUE_CODE VARCHAR(20),
    LOGIN_ID INT,
    DUES_TYPE VARCHAR(50),
    DUE_DATE DATE,
    STATUS VARCHAR(20) DEFAULT 'unpaid',
    AMOUNT NUMERIC(10, 2) CHECK (AMOUNT >= 0),
    OPERATOR VARCHAR(100),
    TRANSACTION_ID VARCHAR(100),
    ACCOUNT_NUMBER VARCHAR(30),
    PAID_DATE DATE,
    PRIMARY KEY (DUE_CODE, LOGIN_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES STUDENT(LOGIN_ID)
);

CREATE TABLE NOTICE (
    NOTICE_ID SERIAL PRIMARY KEY,
    LOGIN_ID INT,
    NOTICE_DATE DATE,
    TITLE VARCHAR(200),
    CONTENT TEXT,
    RECEIVER_TYPE VARCHAR(50),
    FOREIGN KEY (LOGIN_ID) REFERENCES ADMIN(LOGIN_ID)
);

CREATE TABLE NOTICE_STUDENT (
    NOTICE_ID INT,
    LOGIN_ID INT,
    PRIMARY KEY (NOTICE_ID, LOGIN_ID),
    FOREIGN KEY (NOTICE_ID) REFERENCES NOTICE(NOTICE_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES STUDENT(LOGIN_ID)
);

CREATE TABLE NOTICE_TEACHER (
    NOTICE_ID INT,
    LOGIN_ID INT,
    PRIMARY KEY (NOTICE_ID, LOGIN_ID),
    FOREIGN KEY (NOTICE_ID) REFERENCES NOTICE(NOTICE_ID),
    FOREIGN KEY (LOGIN_ID) REFERENCES TEACHER(LOGIN_ID)
);

CREATE TABLE HALL_SECURITY (
    HALL_ID INT,
    SECURITY_GUARD_ID INT,
    SECURITY_GUARD_NAME VARCHAR(100),
    PHONE_NUMBER VARCHAR(20),
    PRIMARY KEY (HALL_ID, SECURITY_GUARD_ID),
    FOREIGN KEY (HALL_ID) REFERENCES HALL(HALL_ID)
);

INSERT INTO login (login_id, user_type, password)
VALUES (2205091, 'student', '$2b$10$nM1ZAPWP08L3bTsyy/pFxOB.sxFs9P5nRHq9tmpesI7xvH36cHpB2');  -- paste the full hash here

SELECT * FROM login;
ALTER TABLE LOGIN ADD COLUMN status VARCHAR(20) DEFAULT 'pending';
ALTER TABLE LOGIN ADD COLUMN email VARCHAR(100);


DELETE FROM login;

SELECT
        s.login_id AS "User ID",s.name AS Name,s.mobile_banking_method,
        s.mobile_banking_account,
       ('Level-' || lt.level ||',Term-'|| lt.term) AS "Level/Term",
       d.department_id AS Department,
       h.hall_name AS Hall ,t.name AS "Advisor Name", 
       s.birth_registration_no AS "Birth Registration No", s.birth_date AS "Birth Date", s.nid NID,
       s.bank_account_number, s.email, s.district, s.upazilla,
       s.additional_address, s.contact_person_name, s.contact_person_address, s.contact_person_mobile_number
       FROM student s
       LEFT JOIN level_term lt ON s.level_term_id=lt.level_term_id
       LEFT JOIN department d on s.department_id=d.department_id
       LEFT JOIN hall h on s.hall_id=h.hall_id
       LEFT JOIN teacher t on s.advisor_id=t.login_id
       WHERE s.login_id=2205091

ALTER TABLE student
ADD COLUMN contact_person_mobile_number VARCHAR(15),
ADD COLUMN mobile_banking_method VARCHAR(20),
ADD COLUMN mobile_banking_account VARCHAR(30);




